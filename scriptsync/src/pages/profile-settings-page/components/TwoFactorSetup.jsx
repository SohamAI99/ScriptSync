import React, { useState } from 'react';
import Icon from '../../../components/AppIcon';

const TwoFactorSetup = ({ onComplete, onCancel }) => {
  const [step, setStep] = useState(1);
  const [verificationCode, setVerificationCode] = useState('');
  const [backupCodes, setBackupCodes] = useState([]);
  const [errors, setErrors] = useState({});

  // QR code data - in real app this would be generated by backend
  const qrCodeSecret = 'JBSWY3DPEHPK3PXP';
  const userEmail = localStorage.getItem('userEmail') || 'user@scriptsync.com';
  const qrCodeUrl = `otpauth://totp/ScriptSync:${userEmail}?secret=${qrCodeSecret}&issuer=ScriptSync`;
  
  const mockBackupCodes = [
    '1a2b3c4d',
    '5e6f7g8h',
    '9i0j1k2l',
    '3m4n5o6p',
    '7q8r9s0t',
    'u1v2w3x4',
    'y5z6a7b8',
    'c9d0e1f2'
  ];

  const handleVerifyCode = async () => {
    if (!verificationCode || verificationCode?.length !== 6) {
      setErrors({ code: 'Please enter a valid 6-digit code' });
      return;
    }

    // Simulate verification
    if (verificationCode === '123456') {
      setBackupCodes(mockBackupCodes);
      setStep(3);
    } else {
      setErrors({ code: 'Invalid verification code. Please try again.' });
    }
  };

  const handleComplete = () => {
    onComplete(true);
  };

  const handleCodeChange = (value) => {
    setVerificationCode(value?.replace(/\D/g, '')?.slice(0, 6));
    if (errors?.code) {
      setErrors({ code: '' });
    }
  };

  const copyBackupCodes = () => {
    const codesText = backupCodes?.join('\n');
    navigator.clipboard?.writeText(codesText);
  };

  const downloadBackupCodes = () => {
    const codesText = `ScriptSync Backup Codes\nGenerated: ${new Date()?.toLocaleDateString()}\n\n${backupCodes?.join('\n')}\n\nKeep these codes safe and secure.`;
    const blob = new Blob([codesText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `scriptsync-backup-codes-${new Date()?.toISOString()?.split('T')?.[0]}.txt`;
    link?.click();
    URL.revokeObjectURL(url);
  };

  const renderStep1 = () => (
    <div className="space-y-6">
      <div className="text-center">
        <div className="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4">
          <Icon name="Shield" size={32} className="text-primary" />
        </div>
        <h3 className="text-lg font-heading font-semibold text-foreground">
          Enable Two-Factor Authentication
        </h3>
        <p className="text-sm text-muted-foreground font-body mt-2">
          Add an extra layer of security to your account
        </p>
      </div>

      <div className="p-4 rounded-lg bg-muted/50 border border-border">
        <div className="flex items-start space-x-3">
          <Icon name="Info" size={20} className="text-primary mt-0.5" />
          <div>
            <div className="font-body font-medium text-foreground mb-2">
              What you'll need:
            </div>
            <ul className="text-sm text-muted-foreground font-body space-y-1">
              <li>• An authenticator app (Google Authenticator, Authy, etc.)</li>
              <li>• Your phone or mobile device</li>
              <li>• A few minutes to complete setup</li>
            </ul>
          </div>
        </div>
      </div>

      <div className="flex justify-end space-x-3">
        <button
          onClick={onCancel}
          className="px-6 py-2 border border-border rounded-lg transition-smooth hover:bg-white/5 font-body"
        >
          Cancel
        </button>
        <button
          onClick={() => setStep(2)}
          className="px-6 py-2 bg-primary text-primary-foreground rounded-lg transition-smooth hover:bg-primary/90 shadow-floating font-body"
        >
          Continue
        </button>
      </div>
    </div>
  );

  const renderStep2 = () => (
    <div className="space-y-6">
      <div className="text-center">
        <h3 className="text-lg font-heading font-semibold text-foreground mb-2">
          Scan QR Code
        </h3>
        <p className="text-sm text-muted-foreground font-body">
          Use your authenticator app to scan this QR code
        </p>
      </div>

      <div className="flex flex-col items-center space-y-4">
        {/* Mock QR Code */}
        <div className="w-48 h-48 bg-white rounded-lg p-4 flex items-center justify-center">
          <div className="text-center">
            <Icon name="QrCode" size={120} className="text-gray-800" />
            <div className="text-xs text-gray-600 mt-2">QR Code</div>
          </div>
        </div>

        <div className="text-center">
          <p className="text-sm text-muted-foreground font-body mb-2">
            Can't scan? Enter this code manually:
          </p>
          <div className="px-4 py-2 bg-muted rounded-lg font-mono text-sm text-foreground">
            {qrCodeSecret}
          </div>
        </div>
      </div>

      <div>
        <label className="block text-sm font-body font-medium text-foreground mb-2">
          Verification Code
        </label>
        <input
          type="text"
          value={verificationCode}
          onChange={(e) => handleCodeChange(e?.target?.value)}
          placeholder="Enter 6-digit code"
          className={`w-full px-4 py-3 rounded-lg bg-input border text-foreground placeholder-muted-foreground text-center font-mono text-lg tracking-widest transition-smooth focus:ring-2 focus:ring-primary focus:border-transparent ${
            errors?.code ? 'border-destructive' : 'border-border'
          }`}
          maxLength={6}
        />
        {errors?.code && (
          <p className="mt-2 text-sm text-destructive font-body">{errors?.code}</p>
        )}
        <p className="mt-2 text-xs text-muted-foreground font-body">
          Enter the 6-digit code from your authenticator app
        </p>
      </div>

      <div className="flex justify-end space-x-3">
        <button
          onClick={() => setStep(1)}
          className="px-6 py-2 border border-border rounded-lg transition-smooth hover:bg-white/5 font-body"
        >
          Back
        </button>
        <button
          onClick={handleVerifyCode}
          disabled={verificationCode?.length !== 6}
          className="px-6 py-2 bg-primary text-primary-foreground rounded-lg transition-smooth hover:bg-primary/90 disabled:opacity-50 shadow-floating font-body"
        >
          Verify
        </button>
      </div>
    </div>
  );

  const renderStep3 = () => (
    <div className="space-y-6">
      <div className="text-center">
        <div className="w-16 h-16 bg-success/10 rounded-full flex items-center justify-center mx-auto mb-4">
          <Icon name="CheckCircle" size={32} className="text-success" />
        </div>
        <h3 className="text-lg font-heading font-semibold text-foreground">
          Two-Factor Authentication Enabled
        </h3>
        <p className="text-sm text-muted-foreground font-body mt-2">
          Save these backup codes in a safe place
        </p>
      </div>

      <div className="p-4 rounded-lg bg-warning/10 border border-warning/20">
        <div className="flex items-start space-x-3">
          <Icon name="AlertTriangle" size={20} className="text-warning mt-0.5" />
          <div>
            <div className="font-body font-medium text-foreground mb-2">
              Important: Save Your Backup Codes
            </div>
            <p className="text-sm text-muted-foreground font-body">
              These codes can be used to access your account if you lose access to your authenticator app. 
              Each code can only be used once.
            </p>
          </div>
        </div>
      </div>

      <div>
        <div className="flex items-center justify-between mb-3">
          <label className="text-sm font-body font-medium text-foreground">
            Backup Codes
          </label>
          <div className="flex space-x-2">
            <button
              onClick={copyBackupCodes}
              className="flex items-center space-x-1 px-3 py-1.5 text-sm border border-border rounded-lg transition-smooth hover:bg-white/5 font-body"
            >
              <Icon name="Copy" size={14} />
              <span>Copy</span>
            </button>
            <button
              onClick={downloadBackupCodes}
              className="flex items-center space-x-1 px-3 py-1.5 text-sm border border-border rounded-lg transition-smooth hover:bg-white/5 font-body"
            >
              <Icon name="Download" size={14} />
              <span>Download</span>
            </button>
          </div>
        </div>
        <div className="grid grid-cols-2 gap-2 p-4 rounded-lg bg-muted border border-border">
          {backupCodes?.map((code, index) => (
            <div
              key={index}
              className="px-3 py-2 bg-background rounded-md text-center font-mono text-sm text-foreground"
            >
              {code}
            </div>
          ))}
        </div>
      </div>

      <div className="flex justify-end">
        <button
          onClick={handleComplete}
          className="px-6 py-2 bg-success text-success-foreground rounded-lg transition-smooth hover:bg-success/90 shadow-floating font-body"
        >
          Complete Setup
        </button>
      </div>
    </div>
  );

  return (
    <div className="mt-6 p-6 rounded-lg bg-background border border-border">
      {step === 1 && renderStep1()}
      {step === 2 && renderStep2()}
      {step === 3 && renderStep3()}
    </div>
  );
};

export default TwoFactorSetup;